# {{ ansible_managed }}

# See the VCL chapters in the Users Guide at https://www.varnish-cache.org/docs/
# and http://varnish-cache.org/trac/wiki/VCLExamples for more examples.

# To start quickly, there are some reference to read:
# VCL syntax: https://www.varnish-cache.org/docs/trunk/users-guide/vcl-syntax.html
# Routines: https://www.varnish-cache.org/docs/trunk/users-guide/vcl-built-in-subs.html
# Objects: https://www.varnish-cache.org/docs/trunk/users-guide/vcl-variables.html
# Actions: https://www.varnish-cache.org/docs/trunk/users-guide/vcl-actions.html
# Entry point: https://www.varnish-cache.org/docs/trunk/users-guide/index.html


vcl 4.0;
import std;
import directors;


#
# Backends
########################################

{% for k, v in varnish4_backends.items() %}{% if v.type is defined and v.type == "backend" %}
# {{ k }} backend
backend {{ k }} {
    .host = "{{ v.host }}";
    .port = "{{ v.port }}";
}

{% endif %}{% endfor %}



#
# Directors
########################################

sub vcl_init {

{% for k, v in varnish4_backends.items() %}{% if v.type is defined and v.type == "director" %}
	# {{ k }} director
	new {{ k }} = directors.round_robin();
{% for i in v.backends %}
	{{ k }}.add_backend({{ i }});
{% endfor %}

{% endif %}{% endfor %}
}



#
# ACLs
########################################


acl debug {
{% for i in varnish4_acl_debug %}
	"{{i}}";
{% endfor %}
}


#
# Receive
########################################
# Happens before we check if we have this in cache already.
#
# Typically you clean up the request here, removing cookies you don't need,
# rewriting the request, etc.


sub vcl_recv {

	# Get informations from client
	if (req.restarts == 0) {

		# Get real ip
		if (req.http.X-Forwarded-For) {
			set req.http.X-Real-Ip = regsub(req.http.X-Forwarded-For,",.*","");
			set req.http.X-Forwarded-For = req.http.X-Forwarded-For + ", " + client.ip;
		} else {
			set req.http.X-Real-Ip = client.ip;
			set req.http.X-Forwarded-For = client.ip;
		}

		# Get real protocol
		if ( ! req.http.X-Forwarded-Proto || ! req.http.X-Forwarded-Proto ~ "https" ) {
			set req.http.X-Forwarded-Proto = "http";
			set req.http.X-Real-Proto = "http";
		} else {
			set req.http.X-Forwarded-Proto = "https";
			set req.http.X-Real-Proto = "https";
		}

		# Get chain
		if ( req.http.X-Forwarded-By ) {
			set req.http.X-Forwarded-By = req.http.X-Forwarded-By + " varnish";
		} else {
			set req.http.X-Forwarded-By = " varnish";
		}
	}



	# Include rules definitions
	{% for i in varnish4_recv_files %}
	include	"include/recv_{{ i }}.vcl";
	{% endfor %}


	# Default rules definitions
#{% for k, v in varnish4_backends.items() %}{% if v.type is defined and v.type == "backend" %}
#	if ( req.http.host ~ "{{ k}}.*" ) {
#		set req.backend_hint = {{ k}};
#	}
#{% endif %}{% endfor %}


}


#
# Backend Response
########################################
# Happens after we have read the response headers from the backend.
#
# Here you clean the response headers, removing silly Set-Cookie headers
# and other mistakes your backend does.

sub vcl_backend_response {

	###
	# Enable debug headers for whitelisted IPs
	###
	if (beresp.status == 303 || beresp.status == 302) {
	        set beresp.ttl = 0s;
	}
	set beresp.http.X-Varnish-TTL = beresp.ttl;
	set beresp.http.X-Backend = beresp.backend.name ;

}






#
# Deliver
########################################
# Happens when we have all the pieces we need, and are about to send the
# response to the client.
#
# You can do accounting or modifying the final object here.

sub vcl_deliver {

        # Get Debug informaiton
        if ( std.ip(req.http.X-Real-Ip, "0.0.0.0") ~ debug ) {
                # Varnish debug
                set resp.http.X-Served-By = server.hostname;
                set resp.http.X-Varnish-Debug = "Yes";
                set resp.http.X-Varnish-Debug-Age = resp.http.age;
                set resp.http.X-Varnish-Debug-Hits  = obj.hits;
                set resp.http.X-Forwarded-For = req.http.X-Forwarded-For ;
                set resp.http.X-Forwarded-By = req.http.X-Forwarded-By ;
                set resp.http.X-Forwarded-Proto = req.http.X-Forwarded-Proto ;


                # Cache debug
                if (obj.hits > 0) {
                        set     resp.http.X-Varnish-Cache = "HIT";
                } else {
                        set     resp.http.X-Varnish-Cache = "MISS";
                }
                if (resp.http.X-marker == "pass" ) {
                        unset   resp.http.X-marker;
                        set     resp.http.X-Varnish-Cache = "PASS";
                }


                # HTTP debug
                set resp.http.X-Host = req.http.host;
                set resp.http.X-Url = req.url;
                set resp.http.X-Cookie-Debug = req.http.Cookie;

		# Front proxy debug
		set resp.http.x-Pound-Server = req.http.x-Pound-Server ;
        } else {
                unset resp.http.Via;
                unset resp.http.Server;

                unset resp.http.X-Powered-By;
                unset resp.http.X-Pound-Server;

                unset resp.http.X-Varnish;
        	unset resp.http.X-Varnish-Debug;
                unset resp.http.X-Varnish-Cache;
                unset resp.http.X-Varnish-TTL;

                unset resp.http.X-Served-By;
                unset resp.http.X-Host;
                unset resp.http.X-Url;
                unset resp.http.X-Backend;
                unset resp.http.X-Cookie-Debug;
        }

}

